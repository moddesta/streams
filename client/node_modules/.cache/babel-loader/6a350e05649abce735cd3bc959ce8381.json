{"ast":null,"code":"var _jsxFileName = \"/Users/modesta/Desktop/react/streams/client/src/components/GoogleAuth.js\";\n// import React from 'react';\n// import { connect } from 'react-redux';\n// import { signIn, signOut } from '../actions';\n// class GoogleAuth extends React.Component {\n//     componentDidMount(){\n//         window.gapi.load('client:auth2', () => {\n//             window.gapi.client\n//             .init({\n//                 clientId: '161899423176-eobsg8q58edq4ttgp0ij2ji5g47e5308.apps.googleusercontent.com',\n//                 scope: 'email' \n//             })\n//             .then(() => {\n//                 this.auth = window.gapi.auth2.getAuthInstance();\n//                 this.onAuthChange(this.auth.isSignedIn.get()); \n//                 this.auth.isSignedIn.listen(this.onAuthChange);\n//             });\n//         });\n//     } \n//     // this func will be called everytime user's authentication status changes - \n//     //gets only boolean(isSignedIn) - true/false:\n//     //this.setState({ isSignedIn: this.auth.isSignedIn.get() });\n//     onAuthChange = isSignedIn => {\n//         if (isSignedIn) {\n//             //want to call signIn and add user's Id\n//             this.props.signIn(this.auth.currentUser.get().getId());\n//             } else {\n//             this.props.signOut();\n//             }\n//         };\n//     onSignInClick = () => {\n//         this.auth.signIn();\n//     };\n//     onSignOutClick = () => {\n//         this.auth.signOut();\n//     };\n//     renderAuthButton(){\n//         if(this.props.isSignedIn === null){\n//             return null;\n//         } else if (this.props.isSignedIn === true) {\n//             return (\n//                 <button onClick={this.onSignOutClick} className=\"ui red google button\">\n//                     <i className=\"google icon\" />\n//                     Sign Out\n//                 </button>\n//             );\n//         } else {\n//             return (\n//                 <button onClick={this.onSignInClick} className=\"ui red google button\">\n//                     <i className=\"google icon\" />\n//                     Sign In with Google\n//                 </button>\n//             );\n//         }\n//     }\n//     render() {\n//         return <div>{this.renderAuthButton()}</div>;\n//     }\n// }\n// const mapStateToProps = state => {\n//     return { isSignedIn: state.auth.isSignedIn };\n// }\n// export default connect(mapStateToProps, { signIn, signOut })(GoogleAuth);\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleAuth extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAuthChange = isSignedIn => {\n      if (isSignedIn) {\n        this.props.signIn(this.auth.currentUser.get().getId());\n      } else {\n        this.props.signOut();\n      }\n    };\n\n    this.onSignInClick = () => {\n      this.auth.signIn();\n    };\n\n    this.onSignOutClick = () => {\n      this.auth.signOut();\n    };\n  }\n\n  componentDidMount() {\n    window.gapi.load('client:auth2', () => {\n      window.gapi.client.init({\n        clientId: '161899423176-eobsg8q58edq4ttgp0ij2ji5g47e5308.apps.googleusercontent.com',\n        scope: 'email'\n      }).then(() => {\n        this.auth = window.gapi.auth2.getAuthInstance();\n        this.onAuthChange(this.auth.isSignedIn.get());\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  } //     // this func will be called everytime user's authentication status changes - \n  //     //gets only boolean(isSignedIn) - true/false:\n  //     //this.setState({ isSignedIn: this.auth.isSignedIn.get() });\n\n\n  renderAuthButton() {\n    if (this.props.isSignedIn === null) {\n      return null;\n    } else if (this.props.isSignedIn) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onSignOutClick,\n        className: \"ui red google button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), \"Sign Out\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onSignInClick,\n        className: \"ui red google button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), \"Sign In with Google\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.renderAuthButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signIn,\n  signOut\n})(GoogleAuth);","map":{"version":3,"sources":["/Users/modesta/Desktop/react/streams/client/src/components/GoogleAuth.js"],"names":["React","connect","signIn","signOut","GoogleAuth","Component","onAuthChange","isSignedIn","props","auth","currentUser","get","getId","onSignInClick","onSignOutClick","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","renderAuthButton","render","mapStateToProps","state"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import { connect } from 'react-redux';\n// import { signIn, signOut } from '../actions';\n\n\n// class GoogleAuth extends React.Component {\n\n//     componentDidMount(){\n//         window.gapi.load('client:auth2', () => {\n//             window.gapi.client\n//             .init({\n//                 clientId: '161899423176-eobsg8q58edq4ttgp0ij2ji5g47e5308.apps.googleusercontent.com',\n//                 scope: 'email' \n//             })\n//             .then(() => {\n//                 this.auth = window.gapi.auth2.getAuthInstance();\n//                 this.onAuthChange(this.auth.isSignedIn.get()); \n//                 this.auth.isSignedIn.listen(this.onAuthChange);\n//             });\n//         });\n//     } \n\n//     // this func will be called everytime user's authentication status changes - \n//     //gets only boolean(isSignedIn) - true/false:\n//     //this.setState({ isSignedIn: this.auth.isSignedIn.get() });\n\n\n//     onAuthChange = isSignedIn => {\n//         if (isSignedIn) {\n//             //want to call signIn and add user's Id\n//             this.props.signIn(this.auth.currentUser.get().getId());\n//             } else {\n//             this.props.signOut();\n//             }\n//         };\n\n//     onSignInClick = () => {\n//         this.auth.signIn();\n//     };\n\n//     onSignOutClick = () => {\n//         this.auth.signOut();\n//     };\n\n//     renderAuthButton(){\n//         if(this.props.isSignedIn === null){\n//             return null;\n//         } else if (this.props.isSignedIn === true) {\n//             return (\n//                 <button onClick={this.onSignOutClick} className=\"ui red google button\">\n//                     <i className=\"google icon\" />\n//                     Sign Out\n//                 </button>\n//             );\n//         } else {\n//             return (\n//                 <button onClick={this.onSignInClick} className=\"ui red google button\">\n//                     <i className=\"google icon\" />\n//                     Sign In with Google\n//                 </button>\n//             );\n//         }\n//     }\n\n//     render() {\n//         return <div>{this.renderAuthButton()}</div>;\n//     }\n// }\n\n// const mapStateToProps = state => {\n//     return { isSignedIn: state.auth.isSignedIn };\n// }\n\n// export default connect(mapStateToProps, { signIn, signOut })(GoogleAuth);\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions';\n\nclass GoogleAuth extends React.Component {\n  componentDidMount() {\n    window.gapi.load('client:auth2', () => {\n      window.gapi.client\n        .init({\n          clientId:\n            '161899423176-eobsg8q58edq4ttgp0ij2ji5g47e5308.apps.googleusercontent.com',\n          scope: 'email'\n        })\n        .then(() => {\n          this.auth = window.gapi.auth2.getAuthInstance();\n\n          this.onAuthChange(this.auth.isSignedIn.get());\n          this.auth.isSignedIn.listen(this.onAuthChange);\n        });\n    });\n  }\n\n//     // this func will be called everytime user's authentication status changes - \n//     //gets only boolean(isSignedIn) - true/false:\n//     //this.setState({ isSignedIn: this.auth.isSignedIn.get() });\n\n  onAuthChange = isSignedIn => {\n    if (isSignedIn) {\n      this.props.signIn(this.auth.currentUser.get().getId());\n    } else {\n      this.props.signOut();\n    }\n  };\n\n  onSignInClick = () => {\n    this.auth.signIn();\n  };\n\n  onSignOutClick = () => {\n    this.auth.signOut();\n  };\n\n  renderAuthButton() {\n    if (this.props.isSignedIn === null) {\n      return null;\n    } else if (this.props.isSignedIn) {\n      return (\n        <button onClick={this.onSignOutClick} className=\"ui red google button\">\n          <i className=\"google icon\" />\n          Sign Out\n        </button>\n      );\n    } else {\n      return (\n        <button onClick={this.onSignInClick} className=\"ui red google button\">\n          <i className=\"google icon\" />\n          Sign In with Google\n        </button>\n      );\n    }\n  }\n\n  render() {\n    return <div>{this.renderAuthButton()}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return { isSignedIn: state.auth.isSignedIn };\n};\n\nexport default connect(\n  mapStateToProps,\n  { signIn, signOut }\n)(GoogleAuth);\n\n"]},"metadata":{},"sourceType":"module"}