{"ast":null,"code":"var _jsxFileName = \"/Users/modesta/Desktop/react/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, formValues, reduxForm } from 'redux-form'; // const StreamCreate = () => {\n//     return(\n//         <div>\n//             StreamCreate\n//         </div>\n//     );\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.renderError(meta)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/modesta/Desktop/react/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","formValues","reduxForm","StreamCreate","Component","renderInput","input","label","meta","renderError","error","touched","onSubmit","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,YAA7C,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAYvCC,WAZuC,GAYzB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACtC,0BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACI;AAAA,oBAAQD;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEA,sBAAWD,KAAX;AAAkB,UAAA,YAAY,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFA,eAGA;AAAA,oBAAM,KAAKG,WAAL,CAAiBD,IAAjB;AAAN;AAAA;AAAA;AAAA;AAAA,gBAHA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KApBsC;AAAA;;AAEvCC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC5B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AAClB,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ;;AAYDE,EAAAA,QAAQ,CAACX,UAAD,EAAa;AACjBY,IAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ;AACH;;AAEDc,EAAAA,MAAM,GAAG;AACL,wBACI;AACI,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKL,QAA7B,CADd;AAEI,MAAA,SAAS,EAAC,eAFd;AAAA,8BAGQ,QAAC,KAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,SAAS,EAAE,KAAKP,WAFpB;AAGI,QAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,cAHR,eAQQ,QAAC,KAAD;AACI,QAAA,IAAI,EAAC,aADT;AAEI,QAAA,SAAS,EAAE,KAAKA,WAFpB;AAGI,QAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,cARR,eAaQ;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAiBH;;AA5CsC;;AA+C3C,MAAMa,QAAQ,GAAIjB,UAAD,IAAgB;AAC7B,QAAMkB,MAAM,GAAG,EAAf;;AACC,MAAG,CAAClB,UAAU,CAACmB,KAAf,EAAsB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACF;;AAED,MAAG,CAACnB,UAAU,CAACoB,WAAf,EAA4B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACF;;AAED,SAAOF,MAAP;AACJ,CAXD;;AAaA,eAAejB,SAAS,CAAC;AACrBoB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZf,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, formValues, reduxForm } from 'redux-form';\n\n\n// const StreamCreate = () => {\n//     return(\n//         <div>\n//             StreamCreate\n//         </div>\n//     );\n// };\n\nclass StreamCreate extends React.Component {\n\n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({ input, label, meta }) => {\n        return (\n            <div className=\"field\">\n                <label>{label}</label>\n            <input {...input} autoComplete=\"off\" />\n            <div>{this.renderError(meta)}</div>\n            </div>\n        );\n    }\n\n    onSubmit(formValues) {\n        console.log(formValues);\n    }\n\n    render() { \n        return(\n            <form \n                onSubmit={this.props.handleSubmit(this.onSubmit)} \n                className=\"ui form error\"> \n                    <Field \n                        name=\"title\" \n                        component={this.renderInput} \n                        label=\"Enter Title\" \n                    />\n                    <Field \n                        name=\"description\" \n                        component={this.renderInput} \n                        label=\"Enter Description\" \n                    />\n                    <button className=\"ui button primary\">Submit</button>\n            </form>\n        );  \n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n     if(!formValues.title) {\n        errors.title = 'You must enter a title';\n     }\n\n     if(!formValues.description) {\n        errors.description = 'You must enter a description';\n     }\n\n     return errors;\n};\n\nexport default reduxForm({ \n    form: 'streamCreate', \n    validate: validate \n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}