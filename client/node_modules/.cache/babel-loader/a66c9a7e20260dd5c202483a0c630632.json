{"ast":null,"code":"var _jsxFileName = \"/Users/modesta/Desktop/react/streams/client/src/components/streams/StreamForm.js\";\n// import React from 'react';\n// import { Field, reduxForm } from 'redux-form';\n// class StreamForm extends React.Component {\n//     renderError({ error, touched }) {\n//         if (touched && error) {\n//             return (\n//                 <div className=\"ui error message\">\n//                     <div className=\"header\">{error}</div>\n//                 </div>\n//             );\n//         }\n//     }\n//     renderInput = ({ input, label, meta }) => {\n//         const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n//         return (\n//             <div className={className}>\n//                 <label>{label}</label>\n//             <input {...input} autoComplete=\"off\" />\n//             <div>{this.renderError(meta)}</div>\n//             </div>\n//         );\n//     }\n//     onSubmit = (formValues) => {\n//         this.props.onSubmit(formValues);\n//     }\n//     render() {  \n//         return(\n//             <form \n//                 onSubmit={this.props.handleSubmit(this.onSubmit)} \n//                 className=\"ui form error\">  \n//                     <Field \n//                         name=\"title\" \n//                         component={this.renderInput} \n//                         label=\"Enter Title\" \n//                     />\n//                     <Field \n//                         name=\"description\" \n//                         component={this.renderInput} \n//                         label=\"Enter Description\" \n//                     />\n//                     <button className=\"ui button primary\">Submit</button>\n//             </form>\n//         );  \n//     }\n// }\n// const validate = formValues => {\n//     const errors = {};\n//      if(!formValues.title) {\n//         errors.title = 'You must enter a title';\n//      }\n//      if(!formValues.description) {\n//         errors.description = 'You must enter a description';\n//      }\n//      return errors;\n// };\n// export default reduxForm({ \n//     form: 'streamForm', \n//     validate: validate \n// })(StreamForm);\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/modesta/Desktop/react/streams/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","form"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import { Field, reduxForm } from 'redux-form';\n\n// class StreamForm extends React.Component {\n\n//     renderError({ error, touched }) {\n//         if (touched && error) {\n//             return (\n//                 <div className=\"ui error message\">\n//                     <div className=\"header\">{error}</div>\n//                 </div>\n//             );\n//         }\n//     }\n\n//     renderInput = ({ input, label, meta }) => {\n//         const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n//         return (\n//             <div className={className}>\n//                 <label>{label}</label>\n//             <input {...input} autoComplete=\"off\" />\n//             <div>{this.renderError(meta)}</div>\n//             </div>\n//         );\n//     }\n\n//     onSubmit = (formValues) => {\n//         this.props.onSubmit(formValues);\n//     }\n\n//     render() {  \n//         return(\n//             <form \n//                 onSubmit={this.props.handleSubmit(this.onSubmit)} \n//                 className=\"ui form error\">  \n//                     <Field \n//                         name=\"title\" \n//                         component={this.renderInput} \n//                         label=\"Enter Title\" \n//                     />\n//                     <Field \n//                         name=\"description\" \n//                         component={this.renderInput} \n//                         label=\"Enter Description\" \n//                     />\n//                     <button className=\"ui button primary\">Submit</button>\n//             </form>\n//         );  \n//     }\n// }\n\n// const validate = formValues => {\n//     const errors = {};\n\n//      if(!formValues.title) {\n//         errors.title = 'You must enter a title';\n//      }\n\n//      if(!formValues.description) {\n//         errors.description = 'You must enter a description';\n//      }\n\n//      return errors;\n// };\n\n// export default reduxForm({ \n//     form: 'streamForm', \n//     validate: validate \n// })(StreamForm);\n\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n  renderError({ error, touched }) {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\" />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit = formValues => {\n    this.props.onSubmit(formValues);\n  };\n\n  render() {\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"ui form error\"\n      >\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n        <Field\n          name=\"description\"\n          component={this.renderInput}\n          label=\"Enter Description\"\n        />\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate\n})(StreamForm);\n\n\n"]},"metadata":{},"sourceType":"module"}